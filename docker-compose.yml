services:
#   cv_generator:
#     build:
#       context: .
#       dockerfile: cv_generator/Dockerfile
#     env_file:
#       - .env
#     volumes:
#       - ./data:/app/data
#       - ./logs:/app/logs
#       - ./cv_generator/:/app/cv_generator/
#     command: ["uvicorn", "cv_generator.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
#     ports:
#       - 8000:8000
#     restart: always

  agent:
    build:
      context: .
      dockerfile: agent/Dockerfile
    env_file:
      - .env
    environment:
      OLLAMA_HOST: ollama
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
    volumes:
      - ./logs:/app/logs
      - ./agent/:/app/agent/
    command: ["uvicorn", "agent.main:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]
    ports:
      - 8001:8001
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      # ollama:
      #   condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: always
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 30s
      retries: 3
      start_period: 10s
      timeout: 5s

  # data_loader:
  #   build:
  #     context: .
  #     dockerfile: db/Dockerfile
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #   env_file:
  #     - .env
  #   environment:
  #     - POSTGRES_HOST=postgres
  #   volumes:
  #     - ./data/resumes_json:/app/data/resumes_json
  #   command: ["python", "load_initial_data.py"]
  #   restart: "on-failure"

  streamlit:
    build:
      context: .
      dockerfile: front/Dockerfile
    command: ["streamlit", "run", "front/streamlit_app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    restart: on-failure
    volumes:
      - ./data:/app/data
      - ./front:/app/front
    ports:
      - "8501:8501"
    environment:
      PYTHONUNBUFFERED: 1
      STREAMLIT_SERVER_HEADLESS: true
      STREAMLIT_SERVER_ENABLECORS: false
      AGENT_API_HOST: agent
      AGENT_API_PORT: 8001
      AGENT_API_ENDPOINT: "/agent_query"
    # depends_on:
    #   agent:
    #     condition: service_healthy

  # ollama:
  #   image: ollama/ollama:latest
  #   volumes:
  #     - ~/.ollama:/root/.ollama
  #   ports:
  #     - "11434:11434"
  #   env_file:
  #     - .env
  #   environment:
  #     - OLLAMA_KEEP_ALIVE=24h
  #   pull_policy: always
  #   tty: true
  #   restart: unless-stopped
  #   healthcheck:
  #     test: "ollama --version && ollama ps || exit 1"
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 10s

volumes:
  postgres_data:
